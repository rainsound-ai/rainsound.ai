dev() {
	echo "‚ú® Starting development server"
	watch_tailwind &
	watch_rust &
	watch_serverless_functions
}

build() {
	echo "‚ú® Building for production"
	build_tailwind_production && build_rust_production
}

preview() {
	echo "‚ú® Previewing production build"
	build && (
		serve_static_files &
		watch_serverless_functions
	)
}

deploy() {
	echo "‚ú® Deploying"
	build &&
		git add --all &&
		git commit -m "Deploy." &&
		git push &&
		deploy_serverless_functions
}

setup() {
	echo "‚ú® Setting up libraries"
	cargo install cargo-watch --version 8.4.0 --root ./target/cargo_install &&
		cargo install wasm-pack --version 0.12.1 --root ./target/cargo_install &&
		cargo install wasm-opt --version 0.114.0 --root ./target/cargo_install &&
		cargo install simple-http-server --version 0.6.7 --root ./target/cargo_install &&
		cargo install twiggy --version 0.7.0 --root ./target/cargo_install &&
		rm -rf ./target/node_modules && npm install && mv node_modules ./target/node_modules
}

# Semi private ü§∑‚Äç‚ôÇÔ∏è

build_rust_dev() {
	echo "‚ú® Building Rust for development"
	build_browser_dev && build_html && serve_static_files
}

# Private

watch_rust() {
	echo "‚ú® Watching Rust"
	./target/cargo_install/bin/cargo-watch \
		--watch ./html_generator \
		--watch ./browser \
		--watch ./shared \
		--shell './scripts build_rust_dev'
}

watch_serverless_functions() {
	echo "‚ú® Watching functions"
	cd ./serverless_functions && npm run dev
}

deploy_serverless_functions() {
	cd ./serverless_functions && npm run deploy
	cd ..
}

build_rust_production() {
	echo "‚ú® Building Rust for production"
	build_browser_production && build_html
}

build_browser_dev() {
	echo "‚ú® Building browser crate for development"
	cd browser && ../target/cargo_install/bin/wasm-pack build \
		--target web \
		--out-dir ../target/browser \
		--out-name browser \
		--dev \
		--features dev
	cd ..
}

build_browser_production() {
	echo "‚ú® Building browser crate for production"
	cd browser &&
		../target/cargo_install/bin/wasm-pack build --target web --out-dir ../target/browser --out-name browser --release &&
		../target/cargo_install/bin/wasm-opt -Os -o ../target/browser/browser_bg.wasm ../target/browser/browser_bg.wasm
	cd ..
}

build_html() {
	echo "‚ú® Building HTML"
	cargo run
}

serve_static_files() {
	echo "‚ú® Serving static files"
	./target/cargo_install/bin/simple-http-server \
		--port 3000 \
		--index \
		--nocache built
}

watch_tailwind() {
	echo "‚ú® Watching Tailwind"
	npx \
		--prefix ./target/node_modules tailwindcss \
		-i ./html_generator/src/main.css \
		-o ./target/tailwind/built.css \
		--watch
}

build_tailwind_production() {
	echo "‚ú® Building Tailwind for production"
	npx \
		--prefix ./target/node_modules tailwindcss \
		-i ./html_generator/src/main.css \
		-o ./target/tailwind/built.css \
		--minify
}

ARGC=$#
ARGV=$@

if [ $ARGC -eq 0 ]; then
	echo "Usage: ./scripts dev|build|preview|deploy|setup|build_rust_dev"
	exit 1
fi

for target in $ARGV; do
	if [ $target == "dev" ]; then
		dev
	elif [ $target == "build" ]; then
		build
	elif [ $target == "build_rust_dev" ]; then
		build_rust_dev
	elif [ $target == "preview" ]; then
		preview
	elif [ $target == "deploy" ]; then
		deploy
	elif [ $target == "setup" ]; then
		setup
	elif [ $target == "watch_serverless_functions" ]; then
		watch_serverless_functions
	else
		echo "Unknown command: $target"
		exit 1
	fi
done
